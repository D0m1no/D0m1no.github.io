<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python自然语言处理入门.md</title>
    <url>/2019/11/06/Python%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8-md/</url>
    <content><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Day1-初识自然语言处理"><a href="#Day1-初识自然语言处理" class="headerlink" title="Day1 初识自然语言处理"></a>Day1 初识自然语言处理</h2><p>在哲学层面上，构建智能机器人是人工智能长久以来的挑战，<strong>语言理解</strong>是智能行为的重要组成部分。这一目标多年来一直是被认为是太困难了。然而，随着NLP技术日趋成熟，用稳定的方法来分析非结构化文本越来越广泛，对自然语言理解的期望变成一个合理的目标再次浮现。  </p>
<p>今天介绍一些语言理解技术。</p>
<a id="more"></a>

<h4 id="词意消歧"><a href="#词意消歧" class="headerlink" title="词意消歧"></a>词意消歧</h4><p>在<strong>词意消歧</strong>中，要分析出特定的上下文中的词被赋予的是哪个意思。思考存在歧义的词serve和dish。  </p>
<blockquote>
<p>a. serve: help with food or drink; hold an office; put ball into play<br>b. dish: plate; course of a meal; communications devices</p>
</blockquote>
<p>在包含短话he served the dish 的句子中，你知道serve 和dish用的都是它们与食物相关的含义。仅仅三个词，讨论的话题，不太可能从体育转向陶器。这也许会迫使你眼前产生一幅怪异的画面:一个职业网球手，正把他的郁闷发泄到放在网球场边的陶瓷茶具上 。换句话说，自动消除歧义，需要使用上下文，利用相邻词汇的相近含义。  </p>
<h4 id="指代消解"><a href="#指代消解" class="headerlink" title="指代消解"></a>指代消解</h4><p>更深刻的语言理解是解决“谁对谁做了什么” ，即检测动词的主语和宾语，虽然你也在小学已经学会了这些，但它比你想象的更难。在句子，the thieves stole the paintings 中，很容易分辨出谁做了偷窃的行为。考虑下面句子中的3种可能，尝试确定是什么被出售、被抓和被发现（其中一种情况是有歧义的）。</p>
<blockquote>
<p>a. The thieves stole the paintings. They were subsequently <strong>sold</strong>.<br>b. The thieves stole the paintings. They were subsequently <strong>caught</strong>.<br>c. The thieves stole the paintings. They were subsequently <strong>found</strong>.</p>
</blockquote>
<p>要回答这个问题，涉及到寻找代词 they 的<strong>先行词</strong>或者paintings。处理这个问题的计算技术包括<strong>指代消解</strong>——确定代词或名词短语指的是什么——和<strong>语义角色标注</strong>——确定名词短语如何与动词相关联（如代理、受事、工具等）。</p>
<h4 id="自动生成语言"><a href="#自动生成语言" class="headerlink" title="自动生成语言"></a>自动生成语言</h4><p>如果能够自动的解决语言理解的问题，我们就能够继续进行那些包含自动生成语言的任务，如<strong>自动问答</strong>和<strong>机器翻译</strong>。在自动问答中，一台机器应该能够回答用户关于特定文本集的问题。</p>
<blockquote>
<p>a. Text:… The thieves stole the paintings. They were subsequently sold…<br>b. Human: Who or what was sold?<br>c. Machine: The paintings.</p>
</blockquote>
<p>机械的回答表明，它已经正确的计算出，they 是指paintings，而不是thieves。在机器翻译中，机器应该能够把文本翻译成另一种语言文字，并准确传达原文的意思。所有这些例子中，弄清楚词的含义、动作的主语及代词的先行词是确定句子含义的步骤，也是希望语言理解系统能够做到的事情。</p>
<h4 id="机器翻译"><a href="#机器翻译" class="headerlink" title="机器翻译"></a>机器翻译</h4><p>长久以来，机器翻译（MT）都是语言理解的圣杯，人们希望能找到从根本上提供高品质且符合语言习惯的任意两种语言之间的翻译。其历史可以追溯到冷战初期，当时自动翻译带来大量的政府赞助，它也是NLP本身的起源。今天，特定语言之间实用的翻译系统已经形成，而且有些已经集成到搜索引擎中了。但是，这些系统有一些严重的缺点。</p>
<p>机器翻译是困难的,一方面原因是给定的单词可能有几种不同的解释,另一方面原因是必须改变词序，才能与目标语言的语法结构保持一致。如今，遇到的难题是，从新闻和政府网站发布的两种或两种以上的语言文档中可以搜集到大量的相似文本。如果给出一个德文和英文双语的文档或者一个双语词典，就可以自动配对组成句子，这个过程叫做<strong>文本对齐</strong>。一旦有100万个或更多的句子对，就可以检测出相应的单词和短语，并建立能用来翻译新文本的模型。</p>
<h4 id="人机对话系统"><a href="#人机对话系统" class="headerlink" title="人机对话系统"></a>人机对话系统</h4><p>在人工智能的历史上，主要的智能测试是一种语言学测试，叫做<strong>图灵测试</strong>：一个响应用户文本输入的对话系统能否表现得如此自然，以至于我们无法区分它是人工生成的响应？相比之下，今天的商业对话系统能力是非常有限的。下面这个图，展示了一个简单的语音对话系统的流程架构。沿途的顶部从左向右，是一些语言理解<strong>组件</strong>的管道。这些图是从语音输入，经过文法分析到某种意义的重现。图的中间，从右向左是这些组件将概念转换为语音的逆向流程。这些组件构成了系统的动态方面。在图的底部是一些有代表性的静态信息：处理组件在其上运作的语言相关数据的仓库。</p>
<p><img src="https://img-blog.csdn.net/20180802201642280?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZ3J5RG9nMTAyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="简单的语音对话系统的流程架构"></p>
<h3 id="NLP的局限性"><a href="#NLP的局限性" class="headerlink" title="NLP的局限性"></a>NLP的局限性</h3><p>尽管在很多如RTE(Recognizing Textual Entaliment)这样的任务研究中取得了进展，但在现实世界已经部署的语言理解系统仍然不能进行常识推理，或以一般的可靠的方式描述这个世界的知识。在等待这些困难的人工智能问题得到解决的同时，接受一些在推理和知识能力上存在严重限制的智能语音系统是有必要的。因此，从一开始，自然语言处理研究的重要目标，一直是使用浅显但强大的技术，代替无边无际的知识和推理能力。，</p>
]]></content>
  </entry>
  <entry>
    <title>algorithm常用函数</title>
    <url>/2019/11/06/algorithm%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h3><h3 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h3><h3 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h3><h3 id="swap"><a href="#swap" class="headerlink" title="swap()"></a>swap()</h3><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reverse(it1, it2)将数组指针在[it1, it2)之间的元素或者容器的迭代器在[it1, it2)范围内的元素进行反转</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line">reverse(a, a + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %d"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 13 12 11 10 14 15</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"abcdefg"</span>;</span><br><span class="line">reverse(str.<span class="built_in">begin</span>() + <span class="number">2</span>, str.<span class="built_in">begin</span>() + <span class="number">6</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;str;</span><br><span class="line"><span class="comment">//输出abfedcg</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fill</span>(a, a+<span class="number">5</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不推荐使用C语言中的qsort函数</span></span><br><span class="line"><span class="comment">//sort(首元素地址(必填)， 尾元素地址的下一个地址(必填)， 比较函数);</span></span><br><span class="line"><span class="comment">//不写比较函数，则默认自增排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现比较函数cmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型数组的排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现结构体数组的排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a. node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x != b.x) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.x &gt;b.x;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现容器的排序</span></span><br><span class="line"><span class="comment">//只有vector, string, deque可以使用sort</span></span><br></pre></td></tr></table></figure>
<h3 id="lower-bound-和upper-bound"><a href="#lower-bound-和upper-bound" class="headerlink" title="lower_bound()和upper_bound()"></a>lower_bound()和upper_bound()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//寻找在数组或容器内的[first, last)范围内第一个值大于等于val的元素的位置</span></span><br><span class="line"><span class="comment">//数组则返回指针，容器则返回迭代器</span></span><br><span class="line"><span class="comment">//如果没有需要寻找的元素，则返回可以插入该元素的位置</span></span><br><span class="line">lower_bound(first, last, val)</span><br><span class="line">upper_bound(first, last, val)</span><br></pre></td></tr></table></figure>
<h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回重复元素的首地址</span></span><br><span class="line"><span class="comment">//计算重复元素</span></span><br><span class="line"><span class="keyword">int</span> m = unique(v.<span class="built_in">begin</span>(), v,<span class="built_in">end</span>()) - v.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> n = unique(a+<span class="number">1</span>, a+n+<span class="number">1</span>) - (a+<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/06/hello-world/</url>
    <content><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
